{ pkgs ? import (import ./pkgs.nix) {}
, compiler ? "ghc864"
, hoogle ? true
}:

let src = pkgs.nix-gitignore.gitignoreSource [] ./.;

    # Any overrides we require to the specified haskell package set
    haskellPackages = with pkgs.haskell.lib;
      pkgs.haskell.packages.${compiler}.override {
      overrides = self: super: {
        vulkan = disableLibraryProfiling (
          haskellPackages.callCabal2nix "" (pkgs.nix-gitignore.gitignoreSource ["generate"] ../vulkan) {
            vulkan = pkgs.vulkan-loader;
          });
        # sdl2 with vulkan functions exposed
        sdl2 =
          let sdl2-src = pkgs.fetchFromGitHub{
                owner  = "haskell-game";
                repo = "sdl2";
                rev  = "0f05cf4416c011ef2e3d3f86e9ac8cc772f59aad";
                sha256 = "0c2pqrbyxmz2z9r9skxhrgalj71w96mqr9d1dzq39qdnl6g27f89";
              };
          in dontCheck (self.callCabal2nix "sdl2" sdl2-src {});
      } // pkgs.lib.optionalAttrs hoogle {
        ghc = super.ghc // { withPackages = super.ghc.withHoogle; };
        ghcWithPackages = self.ghc.withPackages;
      };
    };

    # Any packages to appear in the environment provisioned by nix-shell
    extraEnvPackages = with haskellPackages; [
      pkgs.vulkan-headers
    ];

    # Generate a haskell derivation using the cabal2nix tool on `package.yaml`
    drv = haskellPackages.callCabal2nix "" src {};

    # Insert the extra environment packages into the environment generated by
    # cabal2nix
    envWithExtras = pkgs.lib.overrideDerivation drv.env (attrs: {
      buildInputs = attrs.buildInputs ++ extraEnvPackages;
    } // pkgs.lib.optionalAttrs hoogle {
      shellHook   = attrs.shellHook + ''
        export HIE_HOOGLE_DATABASE="$(cat $(which hoogle) | sed -n -e 's|.*--database \(.*\.hoo\).*|\1|p')"
      '';
    });

in
  drv // { env = envWithExtras; }
